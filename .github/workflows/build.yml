name: Build deb or rpm packages

on:
  workflow_dispatch:  # Allow manual triggers
  push:
    branches: [ main ]
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: 1.19

jobs:
  debian:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: cache
          key: deb-amd64-go-${{ hashFiles('**/*.spec') }}
          restore-keys: deb-amd64-go-
      - uses: actions/setup-go@v3
        name: Installing go
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y debhelper golang-golang-x-tools cmake
      - name: Setup PGP
        env:
          PGP: ${{ secrets.PGP }}
        if: env.PGP != null
        run: |
          echo "${{ env.PGP }}" >> secret.gpg
          gpg --import secret.gpg
          gpg --import-ownertrust <<< "5EAC9FF1F66A043E442D91C8D1EA5D5F3FB99300:6:"
          gpg --list-keys
        shell: bash
      - name: Build
        run: |
          make deb
          mkdir upload
          mv kubescape_*.dsc upload
          mv kubescape_*.tar.xz upload
          mv kubescape_*.deb upload
      - name: Upload Debian Package Files to Artifact
        uses: actions/upload-artifact@v3
        with:
          name: kubescape_debian_amd64
          path: upload/*
  debian-arm64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: cache
          key: deb-arm64-go-${{ hashFiles('**/*.spec') }}
          restore-keys: deb-arm64-go-
      - name: Start packaging environment in container
        run: |
          sudo apt-get install -y binfmt-support qemu-user-static
          sudo docker run --platform linux/arm64 -v ${PWD}:/work -w /work -d --name debbuild golang:${{ env.GO_VERSION }}-bullseye sleep 21600
          sudo docker exec debbuild apt update
          sudo docker exec debbuild apt install -y debhelper golang-golang-x-tools cmake gpg
      - name: Setup PGP
        env:
          PGP: ${{ secrets.PGP }}
        if: env.PGP != null
        run: |
          echo "${{ env.PGP }}" >> secret.gpg
          sudo docker exec debbuild gpg --import secret.gpg
          sudo docker exec debbuild gpg --import-ownertrust <<< "5EAC9FF1F66A043E442D91C8D1EA5D5F3FB99300:6:"
          sudo docker exec debbuild gpg --list-keys
        shell: bash
      - name: Build
        run: |
          sudo docker exec debbuild make deb
      - name: Upload Debian Package Files to Artifact
        uses: actions/upload-artifact@v3
        with:
          name: kubescape_debian_arm64
          path: kubescape_*.deb
  rpm:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [amd64, arm64]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: cache
          key: rpm-${{ matrix.platform }}-go-${{ hashFiles('**/*.spec') }}
          restore-keys: rpm-${{ matrix.platform }}-go-
      - name: Start packaging environment in container
        run: |
          sudo apt-get install -y binfmt-support qemu-user-static
          sudo docker run --platform linux/${{ matrix.platform }} -v ${PWD}:/work -w /work -d --name rpmbuild fedora sleep 21600
          sudo docker exec rpmbuild dnf update -y
          sudo docker exec rpmbuild dnf install golang cmake rpmdevtools -y
      - name: Build
        run: sudo docker exec rpmbuild make rpm PWD=/work
      - name: Upload RPM Package File to Artifact
        uses: actions/upload-artifact@v3
        with:
          name: kubescape_rpm_${{ matrix.platform }}
          path: rpmbuild/RPMS/*
  release-checker:
    outputs:
      latest: ${{ steps.CHECKER.outputs.latest }}
      release: ${{ steps.CHECKER.outputs.release }}
      needrelease: ${{ steps.CHECKER.outputs.needrelease }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          submodules: 'recursive'
      - id: CHECKER
        run: |
          CURRENT=$(git describe --tags --abbrev=0 || true)
          LATEST=$(cat kubescape.spec | grep "Version:" | tr -s ' ' | cut -d' ' -f2)
          RELEASE=$(cat kubescape.spec | grep "Release:" | tr -s ' ' | cut -d' ' -f2)
          echo "latest=${LATEST}" >> $GITHUB_OUTPUT
          echo "release=${RELEASE}" >> $GITHUB_OUTPUT
          if [ "v$LATEST" != "$CURRENT" ]; then echo "needrelease=true" >> $GITHUB_OUTPUT; fi
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [release-checker, debian, debian-arm64, rpm]
    if: needs.release-checker.outputs.needrelease == 'true'
    steps:
      - uses: actions/download-artifact@v3
        id: download-artifact
        with:
          path: .
      - name: Release
        uses: softprops/action-gh-release@c9b46fe7aad9f02afd89b12450b780f52dacfb2d
        env:
          latest: ${{ needs.release-checker.outputs.latest }}
          release: ${{ needs.release-checker.outputs.release }} 
        with:
          tag_name: v${{ env.latest }}
          body: "Bump version into v${{ env.latest }}"
          fail_on_unmatched_files: true
          files: |
            ./kubescape_debian_amd64/kubescape_${{ env.latest }}_amd64.deb
            ./kubescape_debian_amd64/kubescape_${{ env.latest }}.tar.xz
            ./kubescape_debian_amd64/kubescape_${{ env.latest }}.dsc
            ./kubescape_debian_arm64/kubescape_${{ env.latest }}_arm64.deb
            ./kubescape_rpm_amd64/noarch/kubescape-bash-completion-${{ env.latest }}-${{ env.release }}.noarch.rpm
            ./kubescape_rpm_amd64/noarch/kubescape-fish-completion-${{ env.latest }}-${{ env.release }}.noarch.rpm
            ./kubescape_rpm_amd64/noarch/kubescape-zsh-completion-${{ env.latest }}-${{ env.release }}.noarch.rpm
            ./kubescape_rpm_amd64/x86_64/kubescape-${{ env.latest }}-${{ env.release }}.x86_64.rpm
            ./kubescape_rpm_arm64/aarch64/kubescape-${{ env.latest }}-${{ env.release }}.aarch64.rpm
